https://blog.csdn.net/flyfish1986/article/details/106266373/
PyTorch - torch.max、torch.min

flyfish1986 2020-05-21 20:22:48  377  收藏 1
分类专栏： 深度学习
版权
PyTorch - torch.max、torch.min

flyfish

torch.max

找出输入张量中所有元素的最大值
参数
input（张量）–输入张量。
dim（int）–要减少的维。
keepdim（布尔 bool）–输出张量是否保持dim。 默认值：False。
out（元组 tuple，可选）–两个输出张量的结果元组（max，max_indices）

import torch
# 一维的情况
a = torch.randn(1, 3)
print(a)#tensor([[ 0.4084,  0.0232, -0.7173]])
print(torch.max(a))#tensor(0.4084)

#二维的情况
a = torch.randn(4, 3)
print(a)

# tensor([[-0.9843, -0.1896, -0.9875],
#         [-0.2581, -0.2075,  1.0063],
#         [-0.8443, -0.6996,  0.0647],
#         [ 2.0349, -0.8708,  0.8848]])

print("0 False:",torch.max(a, dim=0,keepdim=False))#输出结果是3个元素,shape是[3]
# 0 False: torch.return_types.max(
# values=tensor([ 2.0349, -0.1896,  1.0063]),
# indices=tensor([3, 0, 1]))

print("1 False:",torch.max(a, dim=1,keepdim=False))#输出结果是4个元素shape是[4]
# 1 False: torch.return_types.max(
# values=tensor([-0.1896,  1.0063,  0.0647,  2.0349]),
# indices=tensor([1, 2, 2, 0]))

print("0 True:",torch.max(a, dim=0,keepdim=True))# shape是[1,3]
# 0 True: torch.return_types.max(
# values=tensor([[ 2.0349, -0.1896,  1.0063]]),
# indices=tensor([[3, 0, 1]]))

print("1 Ture:",torch.max(a, dim=1,keepdim=True))# shape是 [4,1]
# 1 Ture: torch.return_types.max(
# values=tensor([[-0.1896],
#         [ 1.0063],
#         [ 0.0647],
#         [ 2.0349]]),
# indices=tensor([[1],
#         [2],
#         [2],
#         [0]]))
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
另一中用法
a.max(1, keepdim=True) 与上面的torch.max(a, dim=1,keepdim=True) 是一样的

维度从0开始
二维的时候 我们可以用 行和列 来表示
4行 3列
dim =0 相当于 减少0维，找出每列最大的，
dim =1 表示 减少1维 ，找出每行最大的
返回两个类型，一个是值，一个是索引
如果遇到torch.min 变成找出输入张量中所有元素的最小值
